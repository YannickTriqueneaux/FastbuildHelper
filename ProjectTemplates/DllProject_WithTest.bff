//-  Project template for building a DLL and its UnitTest executable --------------------------------
//
//  This templates is only tested on Windows and Linux
//  
//  This one will build all *.cc files in the folder   $ProjectSourcesPath$/  including sub folders
//  also all .ExtraCompileFiles
//
//  The output DLL's name will be:  
//      * $ProjectName$.dll         on Windows
//      * $ProjectName$.so          on Linux
//
//
//
//  This one will also build a UnityTest executable taking all *.cc files in the folder   $ProjectTestSourcesPath$/  including sub folders
//
//  The output UnitTest executable's name will be:
//      * Tests-$ProjectName$.exe   on Windows
//      * Tests-$ProjectName$       on Linux
//
//
//  info: This file could be better factorised by using more #include files - but don't do that
//        The file have to stay like that in order to avoid to get an unreadable template
//---------------------------------------------------------------------------------------------------

//FASTBuild documentation
//see   http://www.fastbuild.org/docs/functions/dll.html
//      http://www.fastbuild.org/docs/functions/objectlist.html
//      http://www.fastbuild.org/docs/functions/library.html
//      http://www.fastbuild.org/docs/functions/executable.html

ForEach( .CompilerConfig in .CompilerConfigs )
{
	Using( .CompilerConfig )
	
    .aliasName      = "$ProjectName$-$Platform$-$Config$"
    .aliasTestName  = "Tests-$aliasName$"

#include "../Commands/AddIncludePaths.bff"
#include "../Commands/AddLibraryPaths.bff"
#include "../Commands/AddExtraDefines.bff"
#include "../Commands/AddExtraCompileFlags.bff"
#include "../Commands/AddExtraLinkFlags.bff"
#include "../Commands/AddExternalLibraries.bff"


    .buildDest = ""
#include "../Commands/ConstructBuildDest.bff"


    .CompilerOptions                + .DLLCompilerOptions
                                    + .CppCompilerOptions

    .LinkerOptions                  + .PlatformDefaultLibs
    
#if __WINDOWS__
    ObjectList( "$aliasName$-Obj" )
    {
        .CompilerInputPath          = "$ProjectSourcesPath$/"
        .CompilerInputPattern       = .ProjectSourceInputPattern
        .CompilerInputFiles         = .ProjectExtraCompileFiles
        .CompilerInputExcludePath   = "$ProjectTestSourcesPath$/"

        .CompilerOutputPath         = .buildDest + "Obj/$ProjectName$/"
    }
#endif

#if __LINUX__
    Library( "$aliasName$-Obj" )
    {
        .CompilerInputPath          = "$ProjectSourcesPath$/"
        .CompilerInputPattern       = .ProjectSourceInputPattern
        .CompilerInputFiles         = .ProjectExtraCompileFiles
        .CompilerInputExcludePath    = "$ProjectTestSourcesPath$/"
        
        .CompilerOutputPath			= .buildDest + "Obj/$ProjectName$/"
        .LibrarianOutput 			= .buildDest + "Obj/$ProjectName$" + .staticLibExt
    }
#endif


    DLL("$aliasName$-DLL")
    {
        .Libraries                  = { "$aliasName$-Obj" }

        ForEach(.pdep in .ProjectDependencies)
        {
            ^Libraries              + "$pdep$-$Platform$-$Config$-Lib"
        }

        .LinkerOptions              + .DLLLinkerOptions
                                    + .PlatformDefaultLibs

        .LinkerOutput               = .buildDest + .ProjectBuildDestination + .libNamePrefix + "$ProjectName$" + .dynamicLibExt
    }


#if __WINDOWS__
    ObjectList("$aliasName$Test-Obj")
    {
#include "../Commands/AddTestIncludePaths.bff"

        .CompilerInputPattern       = .ProjectTestSourceInputPattern
        .CompilerInputPath          = "$ProjectTestSourcesPath$/"
        .CompilerOutputPath         = .buildDest + "Obj/$ProjectName$/"
    }
#endif
#if __LINUX__
    Library('$aliasName$Test-Obj')
    {
#include "../Commands/AddTestIncludePaths.bff"
        
        .CompilerInputPattern       = .ProjectTestSourceInputPattern
        .CompilerInputPath          = "$ProjectTestSourcesPath$/"
        .CompilerOutputPath         = .buildDest + "Obj/$ProjectName$/"
        .LibrarianOutput 			= .buildDest + "Obj/$ProjectName$/test.$ProjectName$" + .staticLibExt
    }
#endif

    Executable("$aliasName$-EXE")
    {
        .Libraries                  = { "$aliasName$Test-Obj", "$aliasName$-Obj" }

        ForEach(.pdep in .ProjectDependencies)
        {
            ^Libraries              + "$pdep$-$Platform$-$Config$-Lib"
        }

        .LinkerOptions              + .PlatformDefaultLibs

        .LinkerOutput               = .buildDest + "Tests-$ProjectName$" + .executableExt
    }

    Test( "$aliasName$-TEST" )
    {
        .TestExecutable             = "$aliasName$-EXE"                                 // Executable to execute
        .TestOutput                 = .buildDest + ".testlogs/" + .ProjectName          // Output file for captured test output
        .TestArguments              = .ProjectTestArguments                             // (optional)Arguments to pass to test executable
        .TestWorkingDir             = .buildDest                                        // (optional)Working dir for test execution
    }
    ^SolutionTests                  + "$aliasName$-TEST"


    Alias("$aliasName$")     {      .Targets = { "$aliasName$-DLL" } }
    Alias("$aliasTestName$") {      .Targets = { "$aliasName$-EXE" } }
}

Alias( "$ProjectName$" )
{
	Using( .DefaultCompilerConfig )
        
    .aliasName                      = "$ProjectName$-$Platform$-$Config$"
    .Targets                        = { .aliasName , "Tests-$aliasName$" }
}